{"ast":null,"code":"import { firebaseServer } from './../../config/firebase/server';\nconst db = firebaseServer.firestore();\nconst agenda = db.collection('agenda');\nexport default (async (req, res) => {\n  const [, token] = req.headers.authorization.split(' ');\n\n  if (!token) {\n    return res.status(401);\n  }\n\n  try {\n    const {\n      user_id\n    } = await firebaseServer.auth().verifyIdToken(token);\n    const snapshot = await agenda.where('userId', '==', user_id).where('when', '==', req.query.when).get();\n    return res.status(200).json(snapshot.docs);\n  } catch (error) {\n    console.log('FB ERROR:', error);\n    return res.status(401);\n  }\n});","map":{"version":3,"sources":["/home/nil/projetos/clocker/pages/api/agenda.js"],"names":["firebaseServer","db","firestore","agenda","collection","req","res","token","headers","authorization","split","status","user_id","auth","verifyIdToken","snapshot","where","query","when","get","json","docs","error","console","log"],"mappings":"AAAA,SAASA,cAAT,QAA+B,gCAA/B;AAEA,MAAMC,EAAE,GAAGD,cAAc,CAACE,SAAf,EAAX;AACA,MAAMC,MAAM,GAAGF,EAAE,CAACG,UAAH,CAAc,QAAd,CAAf;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,QAAM,GAAGC,KAAH,IAAYF,GAAG,CAACG,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,CAAlB;;AAEA,MAAI,CAACH,KAAL,EAAY;AACR,WAAOD,GAAG,CAACK,MAAJ,CAAW,GAAX,CAAP;AACH;;AAED,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAMZ,cAAc,CAACa,IAAf,GAAsBC,aAAtB,CAAoCP,KAApC,CAA1B;AAEA,UAAMQ,QAAQ,GAAG,MAAMZ,MAAM,CACxBa,KADkB,CACZ,QADY,EACF,IADE,EACIJ,OADJ,EAElBI,KAFkB,CAEZ,MAFY,EAEJ,IAFI,EAEEX,GAAG,CAACY,KAAJ,CAAUC,IAFZ,EAGlBC,GAHkB,EAAvB;AAMA,WAAOb,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBS,IAAhB,CAAqBL,QAAQ,CAACM,IAA9B,CAAP;AACH,GAVD,CAUE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB;AACA,WAAOhB,GAAG,CAACK,MAAJ,CAAW,GAAX,CAAP;AACH;AACJ,CArBD","sourcesContent":["import { firebaseServer } from './../../config/firebase/server'\n\nconst db = firebaseServer.firestore()\nconst agenda = db.collection('agenda')\n\nexport default async (req, res) => {\n    const [, token] = req.headers.authorization.split(' ')\n\n    if (!token) {\n        return res.status(401)\n    }\n\n    try {\n        const { user_id } = await firebaseServer.auth().verifyIdToken(token)\n\n        const snapshot = await agenda\n            .where('userId', '==', user_id)\n            .where('when', '==', req.query.when)\n            .get()\n\n\n        return res.status(200).json(snapshot.docs)\n    } catch (error) {\n        console.log('FB ERROR:', error)\n        return res.status(401)\n    }\n}"]},"metadata":{},"sourceType":"module"}