{"ast":null,"code":"import firebaseServer from './../../config/firebase/server';\nconst db = firebaseServer.firestore();\nconst agenda = db.collection('agenda');\nexport default (async (req, res) => {\n  const [, token] = req.headers.autorization.split('');\n\n  if (!token) {\n    return res.status(401);\n  }\n\n  try {\n    const {\n      user_id\n    } = await firebaseServer.auth().verifyToken(token);\n    const snapshot = await agenda.where('userId', '===', user_id).where('when', '===', req.query.when).get();\n    return res.status(200).json(snapshot.docs);\n  } catch (error) {\n    console.log('FB', error);\n    return res.status(401);\n  }\n});","map":{"version":3,"sources":["/home/nil/projetos/clocker/pages/api/agenda.js"],"names":["firebaseServer","db","firestore","agenda","collection","req","res","token","headers","autorization","split","status","user_id","auth","verifyToken","snapshot","where","query","when","get","json","docs","error","console","log"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,gCAA3B;AAEA,MAAMC,EAAE,GAAGD,cAAc,CAACE,SAAf,EAAX;AACA,MAAMC,MAAM,GAAGF,EAAE,CAACG,UAAH,CAAc,QAAd,CAAf;AAGA,gBAAe,OAAMC,GAAN,EAAWC,GAAX,KAAkB;AAC7B,QAAK,GAAGC,KAAH,IAAYF,GAAG,CAACG,OAAJ,CAAYC,YAAZ,CAAyBC,KAAzB,CAA+B,EAA/B,CAAjB;;AACA,MAAG,CAACH,KAAJ,EAAU;AACN,WAAOD,GAAG,CAACK,MAAJ,CAAW,GAAX,CAAP;AACH;;AACD,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAY,MAAMZ,cAAc,CAACa,IAAf,GAAsBC,WAAtB,CAAkCP,KAAlC,CAAxB;AACA,UAAMQ,QAAQ,GAAI,MAAMZ,MAAM,CACzBa,KADmB,CACb,QADa,EACH,KADG,EACIJ,OADJ,EAEnBI,KAFmB,CAEb,MAFa,EAEN,KAFM,EAEAX,GAAG,CAACY,KAAJ,CAAUC,IAFV,EAGnBC,GAHmB,EAAxB;AAIA,WAAOb,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBS,IAAhB,CAAqBL,QAAQ,CAACM,IAA9B,CAAP;AACF,GAPF,CAOG,OAAOC,KAAP,EAAc;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,KAAlB;AACA,WAAOhB,GAAG,CAACK,MAAJ,CAAW,GAAX,CAAP;AACH;AAGJ,CAlBD","sourcesContent":["import firebaseServer from './../../config/firebase/server'\n\nconst db = firebaseServer.firestore()\nconst agenda = db.collection('agenda')\n\n\nexport default async(req, res) =>{\n    const[, token] = req.headers.autorization.split('')\n    if(!token){\n        return res.status(401)\n    }\n    try {\n        const {user_id} = await firebaseServer.auth().verifyToken(token)\n        const snapshot  = await agenda \n            .where('userId', '===', user_id)\n            .where('when','===',req.query.when) \n            .get()\n        return res.status(200).json(snapshot.docs)\n     } catch (error) {\n        console.log('FB', error);\n        return res.status(401)\n    }\n     \n \n}"]},"metadata":{},"sourceType":"module"}