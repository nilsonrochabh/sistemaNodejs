{"ast":null,"code":"import { firebaseServer } from '../../config/firebase/server';\nimport { differenceInHours, format, addHours } from 'date-fns';\nconst db = firebaseServer.firestore();\nconst profile = db.collection('profiles');\nconst agenda = db.collection('agenda');\nconst startAt = new Date(2021, 1, 1, 8, 0);\nconst endAt = new Date(2021, 1, 1, 17, 0);\nconst totalHours = differenceInHours(endAt, startAt);\nconst timeBlocks = [];\n\nfor (let blockIndex = 0; blockIndex <= totalHours; blockIndex++) {\n  const time = format(addHours(startAt, blockIndex), \"HH:mm\");\n  timeBlocks.push(time);\n}\n\nexport default (async (req, res) => {\n  console.log(timeBlocks);\n\n  const getUserId = async username => {\n    const profileDoc = await profile.where('username', '===', username).get();\n    const {\n      userId\n    } = profileDoc[0].data();\n    return userId;\n  };\n\n  const SetShedule = async (req, res) => {\n    const userIde = await getUserId(req.body.username);\n    const doc = await agenda.doc(`${userId}#${req.body.when}`).get();\n\n    if (doc.exists) {\n      return res.status(400);\n    }\n\n    agenda.doc(`${userId}#${req.body.when}`).set({\n      userId,\n      when: req.body.when,\n      name: req.bodyy.name,\n      phone: req.body.phone\n    });\n    return res.status(200);\n  };\n\n  const getSchedule = (req, res) => {\n    try {\n      // const profileDoc = await profile\n      //     .where('username', '==', req.query.username)\n      //     .get()\n      // const snapshot = await agenda\n      //     .where('userId', '==', profileDoc.userId)\n      //     .where('when', '==', req.query.when)\n      //     .get()\n      return res.status(200).json(timeBlocks);\n    } catch (error) {\n      console.log('FB ERROR:', error);\n      return res.status(401);\n    }\n  };\n});","map":{"version":3,"sources":["/home/nil/projetos/clocker/pages/api/schedule.js"],"names":["firebaseServer","differenceInHours","format","addHours","db","firestore","profile","collection","agenda","startAt","Date","endAt","totalHours","timeBlocks","blockIndex","time","push","req","res","console","log","getUserId","username","profileDoc","where","get","userId","data","SetShedule","userIde","body","doc","when","exists","status","set","name","bodyy","phone","getSchedule","json","error"],"mappings":"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","sourcesContent":["import { firebaseServer } from '../../config/firebase/server'\nimport { differenceInHours, format, addHours } from 'date-fns'\n\nconst db = firebaseServer.firestore()\nconst profile = db.collection('profiles')\nconst agenda = db.collection('agenda')\n\nconst startAt = new Date(2021, 1, 1, 8, 0)\nconst endAt = new Date(2021, 1, 1, 17, 0)\nconst totalHours = differenceInHours(endAt, startAt)\n\nconst timeBlocks=[]\n\nfor(let blockIndex = 0; blockIndex <= totalHours; blockIndex++){\n    const time = format(addHours(startAt,blockIndex),\"HH:mm\")\n    timeBlocks.push(time)\n}\nexport default async(req, res) =>{\n    console.log(timeBlocks);\n    const getUserId = async(username) =>{\n        const profileDoc = await profile\n            .where('username','===',username)\n            .get()\n            const { userId} = profileDoc[0].data()\n            return userId\n    }\n    const SetShedule = async (req,res) =>{\n        const userIde = await getUserId(req.body.username)\n        const doc = await agenda.doc(`${userId}#${req.body.when}`).get()\n        if(doc.exists){\n            return res.status(400)\n        }\n        agenda.doc(`${userId}#${req.body.when}`).set({\n            userId,\n            when:req.body.when,\n            name: req.bodyy.name,\n            phone:req.body.phone,\n        })\n        return res.status(200)\n    }\n    \n    const getSchedule = (req, res) => {\n        try {\n            // const profileDoc = await profile\n            //     .where('username', '==', req.query.username)\n            //     .get()\n    \n            // const snapshot = await agenda\n            //     .where('userId', '==', profileDoc.userId)\n            //     .where('when', '==', req.query.when)\n            //     .get()\n    \n            return res.status(200).json(timeBlocks)\n        } catch (error) {\n            console.log('FB ERROR:', error)\n            return res.status(401)\n        }\n    }\n \n}"]},"metadata":{},"sourceType":"module"}